// ============================================
// COMANDOS PELIGROSOS DE SISTEMA - LOGSTASH
// Detecta xp_cmdshell, sp_configure, sp_addlinkedserver
// Sin clasificación de riesgo (cliente decide criticidad)
// *** Hora real del evento SQL ***
// ============================================
SQLAudit
| where ['TimeGenerated [UTC]'] >= ago(30d)
| where isnotempty(Statement)
| where Statement has_any ("xp_cmdshell", "sp_configure", "sp_addlinkedserver")
// *** EXTRACCIÓN DE HORA REAL DEL EVENTO SQL ***
| extend EventTimeRaw = extract(@"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)", 1, Message)
| extend EventTime = todatetime(EventTimeRaw)
| extend FechaHoraEvento = coalesce(EventTime, ['TimeGenerated [UTC]'])
// *** PARSEO DEL MESSAGE (formato: fecha|servidor|...|usuario|usuario_afectado|BD|version|statement) ***
| extend MessageParts = split(Message, "|")
| extend Usuario_DelMessage = tostring(MessageParts[7])  // Posición 7: usuario que ejecuta
| extend BD_DelMessage = tostring(MessageParts[9])       // Posición 9: base de datos
// Extracción de usuario (prioridad: Message > CurrentUser)
| extend Usuario = case(
    isnotempty(Usuario_DelMessage) and Usuario_DelMessage != "NULL" and Usuario_DelMessage != "", Usuario_DelMessage,
    isnotempty(CurrentUser), CurrentUser,
    "DESCONOCIDO"
)
// Extracción de servidor
| extend Servidor = coalesce(Server_name, Instance, tostring(MessageParts[1]), "DESCONOCIDO")
// *** EXTRACCIÓN DE BASE DE DATOS ***
| extend EsCambioServidor = case(
    Statement has "sp_configure", true,
    Statement has "xp_cmdshell" and not(Statement has "USE "), true,
    Statement has "sp_addlinkedserver", true,
    false
)
| extend BaseDatos = case(
    isnotempty(BD_DelMessage) and BD_DelMessage != "" and BD_DelMessage != "NULL", BD_DelMessage,
    isnotempty(Database) and Database != "" and Database != "NULL", Database,
    EsCambioServidor == true, "master",
    "N/A"
)
| extend SQLStatement = Statement
| extend ActionType = Action
// Tipo de usuario
| extend TipoUsuario = case(
    Usuario contains "NT AUTHORITY" or Usuario contains "NT SERVICE", "CUENTA_SISTEMA",
    Usuario endswith "$", "CUENTA_MAQUINA",
    Usuario =~ "sa", "SA_ADMIN",
    Usuario contains "\\", "CUENTA_DOMINIO",
    "USUARIO_SQL"
)
// Identificación del tipo de comando
| extend TipoComando = case(
    SQLStatement has "xp_cmdshell" and SQLStatement has "ENABLE", "HABILITAR_XP_CMDSHELL",
    SQLStatement has "xp_cmdshell" and SQLStatement has "DISABLE", "DESHABILITAR_XP_CMDSHELL",
    SQLStatement has "xp_cmdshell", "EJECUTAR_COMANDO_OS",
    SQLStatement has "sp_configure" and SQLStatement has "show advanced", "VER_CONFIGURACION_AVANZADA",
    SQLStatement has "sp_configure" and SQLStatement has "xp_cmdshell", "CONFIGURAR_XP_CMDSHELL",
    SQLStatement has "sp_configure", "MODIFICAR_CONFIGURACION_SERVIDOR",
    SQLStatement has "sp_addlinkedserver", "AGREGAR_SERVIDOR_VINCULADO",
    "COMANDO_SISTEMA"
)
// Extracción del parámetro si existe
| extend ParametroComando = case(
    SQLStatement has "sp_configure", extract(@"sp_configure\s+'([^']+)'", 1, SQLStatement),
    SQLStatement has "xp_cmdshell", extract(@"xp_cmdshell\s+'([^']+)'", 1, SQLStatement),
    "N/A"
)
// Proyecto final
| project 
    FechaHora = FechaHoraEvento,  // *** HORA REAL DEL EVENTO ***
    TipoComando,
    Usuario,
    TipoUsuario,
    Servidor,
    BaseDatos,
    Exito = "SI",  // Logstash registra principalmente comandos exitosos
    Parametro = ParametroComando,
    ComandoCompleto = SQLStatement,
    ActionID = ActionType,
    HostOrigen = host_name_s,
    DetallesCompletos = Message
| order by FechaHora desc
| take 100

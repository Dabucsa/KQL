// ============================================
// OPERACIONES DE DATOS - LOGSTASH (SIMPLE)
// DELETE, UPDATE, INSERT, TRUNCATE, MERGE
// *** Usa hora real del evento SQL ***
// ============================================
let RangoDias = 30d;
SQLAudit
| where ['TimeGenerated [UTC]'] >= ago(RangoDias)
| where isnotempty(Statement)
| where Statement has_any ("DELETE", "UPDATE", "TRUNCATE", "INSERT", "MERGE")
// Extracción de hora real
| extend EventTimeRaw = extract(@"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)", 1, Message)
| extend EventTime = todatetime(EventTimeRaw)
| extend FechaHoraEvento = coalesce(EventTime, ['TimeGenerated [UTC]'])
// Parseo del message
| extend MessageParts = split(Message, "|")
| extend Usuario_DelMessage = tostring(MessageParts[7])
| extend BD_DelMessage = tostring(MessageParts[9])
| extend Usuario = case(
    isnotempty(Usuario_DelMessage) and Usuario_DelMessage != "NULL" and Usuario_DelMessage != "", Usuario_DelMessage,
    isnotempty(CurrentUser), CurrentUser,
    "DESCONOCIDO"
)
| extend Servidor = coalesce(Server_name, Instance, tostring(MessageParts[1]), "DESCONOCIDO")
| extend BaseDatos = case(
    isnotempty(BD_DelMessage) and BD_DelMessage != "" and BD_DelMessage != "NULL", BD_DelMessage,
    isnotempty(Database) and Database != "" and Database != "NULL", Database,
    "N/A"
)
// Tipo de operación
| extend Operacion = case(
    Statement has "DELETE", "DELETE",
    Statement has "UPDATE", "UPDATE",
    Statement has "INSERT", "INSERT",
    Statement has "TRUNCATE", "TRUNCATE",
    Statement has "MERGE", "MERGE",
    "OTRO"
)
// Proyecto simple
| project 
    FechaHora = FechaHoraEvento,
    Operacion,
    Usuario,
    Servidor,
    BaseDatos,
    Exito = "SI",
    Comando = Statement
| order by FechaHora desc
| take 100

// A) Brute-force por cuenta
let lookback = 15m;        // ventana a revisar
let threshold = 5;         // umbral de fallos para alertar
let criticalAccounts = dynamic(["sa", "admin", "sysadmin", "administrator"]); // cuentas críticas
Event
| where TimeGenerated >= ago(lookback)
| where EventLog == "Application"
| where Source has_any ("MSSQLSERVER","MSSQL$","SQLSERVERAGENT")
| where EventID == 18456  // Login failed
| where RenderedDescription has_any ("Login failed", "Login failed for user")
// Extraer cuenta e IP (varias formas comunes)
| extend Account = coalesce(
    extract(@"Login failed for user '([^']+)'", 1, RenderedDescription),
    extract(@"for user\s+['\[]?([^'\]\s,;]+)['\]]?", 1, RenderedDescription),
    extract(@"principal_name=([^;,\s]+)", 1, RenderedDescription),
    extract(@"login_name=([^;,\s]+)", 1, RenderedDescription),
    extract(@"user\s+'([^']+)'", 1, RenderedDescription)
)
| extend ClientIP = coalesce(
    extract(@"client_ip=([^;,\s]+)", 1, RenderedDescription),
    extract(@"Client:\s*([^;,\s\]]+)", 1, RenderedDescription),
    extract(@"\[CLIENT:\s*([^\]]+)\]", 1, RenderedDescription),
    extract(@"from\s+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)", 1, RenderedDescription),
    "UNKNOWN"
)
// Extraer razón del fallo (State code en SQL Server)
| extend ErrorState = extract(@"State:\s*(\d+)", 1, RenderedDescription)
| extend ErrorReason = case(
    ErrorState == "1", "Account does not exist",
    ErrorState == "2", "Wrong password",
    ErrorState == "5", "Account not valid",
    ErrorState == "6", "Account locked/disabled",
    ErrorState == "7", "Password expired",
    ErrorState == "8", "Wrong password",
    ErrorState == "11", "Login valid but server access failed",
    ErrorState == "16", "No access to database",
    isnotempty(ErrorState), strcat("State ", ErrorState),
    "Unknown"
)
| where isnotempty(Account)
// Resumen por cuenta
| summarize 
    FailedAttempts = count(), 
    DistinctIPs = dcountif(ClientIP, ClientIP != "UNKNOWN"), 
    IPs = make_set(ClientIP),
    ErrorStates = make_set(ErrorState),
    ErrorReasons = make_set(ErrorReason),
    FirstSeen = min(TimeGenerated), 
    LastSeen = max(TimeGenerated), 
    Servers = make_set(Computer),
    AvgAttemptsPerMinute = count() / datetime_diff('minute', max(TimeGenerated), min(TimeGenerated))
    by Account
| where FailedAttempts >= threshold
// Clasificar severidad
| extend Severity = case(
    Account in (criticalAccounts), "CRITICAL",
    FailedAttempts >= 20, "CRITICAL",
    FailedAttempts >= 10, "HIGH",
    DistinctIPs >= 5, "HIGH",
    "MEDIUM"
)
| extend IsCriticalAccount = iff(Account in (criticalAccounts), "YES", "NO")
| extend AttackDuration = datetime_diff('minute', LastSeen, FirstSeen)
| project 
    Severity,
    Account, 
    IsCriticalAccount,
    FailedAttempts, 
    DistinctIPs, 
    IPs, 
    ErrorReasons,
    Servers, 
    FirstSeen, 
    LastSeen,
    AttackDuration,
    AvgAttemptsPerMinute
| order by Severity desc, FailedAttempts desc

// ============================================
// OPERACIONES DE DATOS - UNIFICADA 
// Azure Arc + Logstash
// DELETE, UPDATE, INSERT, TRUNCATE, MERGE
// ============================================
let RangoDias = 30d;
// PARTE 1: AZURE ARC
let ArcData = materialize(
    Event
    | where TimeGenerated >= ago(RangoDias)
    | where EventLog == "Application"
    | where Source has_any ("MSSQLSERVER","MSSQL$","SQLSERVERAGENT")
    | where EventID == 33205
    | where RenderedDescription has_any ("DELETE", "UPDATE", "TRUNCATE", "INSERT", "MERGE")   
    | extend ServerPrincipalName = trim(@"\s", extract(@"server_principal_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+server_principal_sid:|$)", 1, RenderedDescription))
    | extend SessionServerPrincipalName = trim(@"\s", extract(@"session_server_principal_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+server_principal_name:|$)", 1, RenderedDescription))
    | extend DatabasePrincipalName = trim(@"\s", extract(@"database_principal_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+target_server_principal_name:|$)", 1, RenderedDescription))  
    | extend Usuario = coalesce(
        iff(DatabasePrincipalName != "" and DatabasePrincipalName != "dbo", DatabasePrincipalName, ""),
        iff(ServerPrincipalName != "", ServerPrincipalName, ""),
        iff(SessionServerPrincipalName != "", SessionServerPrincipalName, ""),
        "NO_IDENTIFICADO"
    )   
    | extend DatabaseName = trim(@"\s", extract(@"database_name:([^\s]+)", 1, RenderedDescription))
    | extend SQLStatement = trim(@"\s", extract(@"statement:([^\s]+(?:\s+[^\s]+)*?)(?:\s+additional_information:|$)", 1, RenderedDescription))
    | extend Succeeded = extract(@"succeeded:([^\s]+)", 1, RenderedDescription)   
    | extend Servidor = Computer
    | extend BaseDatos = iff(isempty(DatabaseName), "N/A", DatabaseName)
    | extend FechaHora = TimeGenerated
    | extend Origen = "AzureArc"
    | extend Exito = iff(Succeeded == "true", "SI", "NO")   
    | project FechaHora, Origen, Servidor, Usuario, BaseDatos, SQLStatement, Exito
);
// PARTE 2: LOGSTASH
let LogstashData = materialize(
    SQLAudit
    | where ['TimeGenerated [UTC]'] >= ago(RangoDias)
    | where isnotempty(Statement)
    | where Statement has_any ("DELETE", "UPDATE", "TRUNCATE", "INSERT", "MERGE")  
    | extend EventTimeRaw = extract(@"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)", 1, Message)
    | extend EventTime = todatetime(EventTimeRaw)
    | extend FechaHoraEvento = coalesce(EventTime, ['TimeGenerated [UTC]'])  
    | extend MessageParts = split(Message, "|")
    | extend Usuario_DelMessage = tostring(MessageParts[7])
    | extend BD_DelMessage = tostring(MessageParts[9])    
    | extend Usuario = case(
        isnotempty(Usuario_DelMessage) and Usuario_DelMessage != "NULL" and Usuario_DelMessage != "", Usuario_DelMessage,
        isnotempty(CurrentUser), CurrentUser,
        "DESCONOCIDO"
    )  
    | extend Servidor = coalesce(Server_name, Instance, tostring(MessageParts[1]), "DESCONOCIDO")  
    | extend BaseDatos = case(
        isnotempty(BD_DelMessage) and BD_DelMessage != "" and BD_DelMessage != "NULL", BD_DelMessage,
        isnotempty(Database) and Database != "" and Database != "NULL", Database,
        "N/A"
    )   
    | extend SQLStatement = Statement
    | extend FechaHora = FechaHoraEvento
    | extend Origen = "Logstash"
    | extend Exito = "SI"   
    | project FechaHora, Origen, Servidor, Usuario, BaseDatos, SQLStatement, Exito
);
// UNIÓN
union isfuzzy=true ArcData, LogstashData
// Tipo de operación
| extend Operacion = case(
    SQLStatement has "DELETE", "DELETE",
    SQLStatement has "UPDATE", "UPDATE",
    SQLStatement has "INSERT", "INSERT",
    SQLStatement has "TRUNCATE", "TRUNCATE",
    SQLStatement has "MERGE", "MERGE",
    "OTRO"
)
// Proyecto simple
| project 
    FechaHora,
    Operacion,
    Usuario,
    Servidor,
    BaseDatos,
    Exito,
    Comando = SQLStatement,
    Origen
| order by FechaHora desc
| take 200

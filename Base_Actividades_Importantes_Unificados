// ============================================
// QUERY UNIFICADA - AZURE ARC + LOGSTASH
// Actividad administrativa con hora real de eventos
// ============================================
// ============================================
// PARÁMETROS DE CONFIGURACIÓN
// ============================================
let dias = 7;                    // Días hacia atrás a consultar
let soloFueraHorario = false;     // true = solo fuera de horario, false = todos
let limitePorFuente = 1000;       // Registros por fuente (Arc/Logstash)
let limiteResultadoFinal = 500;   // Registros en resultado final
// ============================================
// PARTE 1: DATOS DE AZURE ARC
// ============================================
let ArcData = materialize(
    Event
    | where TimeGenerated >= ago(dias * 1d)
    | where EventLog == "Application"
    | where Source has_any ("MSSQLSERVER","MSSQL$","SQLSERVERAGENT")
    | where EventID == 33205
    | where RenderedDescription has_any (
        "CREATE", "DROP", "ALTER", "GRANT", "REVOKE",
        "sp_configure", "xp_cmdshell", "ADD MEMBER", "DROP MEMBER", "DENY"
    )
    // Cálculo de horario (Arc usa TimeGenerated directamente - ya es la hora del evento)
    | extend Hour = hourofday(TimeGenerated)
    | extend DayOfWeek = dayofweek(TimeGenerated)
    | extend IsOffHours = iff((DayOfWeek == 0d or DayOfWeek == 6d) or (Hour < 6 or Hour >= 22), true, false)
    // Filtro condicional de horario
    | where soloFueraHorario == false or IsOffHours == true
    | top limitePorFuente by TimeGenerated desc
    // Extracciones de usuario
    | extend ServerPrincipalName = trim(@"\s", extract(@"server_principal_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+server_principal_sid:|$)", 1, RenderedDescription))
    | extend SessionServerPrincipalName = trim(@"\s", extract(@"session_server_principal_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+server_principal_name:|$)", 1, RenderedDescription))
    | extend DatabasePrincipalName = trim(@"\s", extract(@"database_principal_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+target_server_principal_name:|$)", 1, RenderedDescription))
    | extend Usuario = coalesce(
        iff(DatabasePrincipalName != "" and DatabasePrincipalName != "dbo", DatabasePrincipalName, ""),
        iff(ServerPrincipalName != "", ServerPrincipalName, ""),
        iff(SessionServerPrincipalName != "", SessionServerPrincipalName, ""),
        "NO_IDENTIFICADO"
    )
    // Extracciones básicas
    | extend DatabaseName = trim(@"\s", extract(@"database_name:([^\s]+)", 1, RenderedDescription))
    | extend SQLStatement = trim(@"\s", extract(@"statement:([^\s]+(?:\s+[^\s]+)*?)(?:\s+additional_information:|$)", 1, RenderedDescription))
    | extend ActionID = extract(@"action_id:([^\s]+)", 1, RenderedDescription)
    | extend Succeeded = extract(@"succeeded:([^\s]+)", 1, RenderedDescription)
    // Extracción de tabla/objeto
    | extend SchemaName = trim(@"\s", extract(@"schema_name:([^\s]+)", 1, RenderedDescription))
    | extend ObjectName = trim(@"\s", extract(@"object_name:([^\s]+(?:\s+[^\s]+)*?)(?:\s+statement:|$)", 1, RenderedDescription))
    | extend ObjetoAfectado = case(
        isnotempty(SchemaName) and isnotempty(ObjectName), strcat(SchemaName, ".", ObjectName),
        isnotempty(ObjectName), ObjectName,
        "N/A"
    )
    | extend Servidor = Computer
    | extend Origen = "AzureArc"
    | extend DetallesCompletos = RenderedDescription
    | extend FechaEvento = TimeGenerated
    | project FechaEvento, Servidor, Usuario, DatabaseName, SQLStatement, ActionID, Succeeded, 
              Origen, DetallesCompletos, Hour, DayOfWeek, ObjetoAfectado, IsOffHours
);
// ============================================
// PARTE 2: DATOS DE LOGSTASH (*** CORREGIDO ***)
// ============================================
let LogstashData = materialize(
    SQLAudit
    | where ['TimeGenerated [UTC]'] >= ago(dias * 1d)
    | where isnotempty(Statement)
    | where Statement has_any (
        "CREATE", "DROP", "ALTER", "GRANT", "REVOKE",
        "sp_configure", "xp_cmdshell", "ADD MEMBER", "DROP MEMBER", "DENY"
    )
    // *** EXTRACCIÓN DE HORA REAL DEL EVENTO SQL ***
    | extend EventTimeRaw = extract(@"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+)", 1, Message)
    | extend EventTime = todatetime(EventTimeRaw)
    | extend FechaHoraEvento = coalesce(EventTime, ['TimeGenerated [UTC]'])  // Fallback si no se extrae   
    // Cálculo de horario CORREGIDO (usa hora real del evento SQL)
    | extend Hour = hourofday(FechaHoraEvento)
    | extend DayOfWeek = dayofweek(FechaHoraEvento)
    | extend IsOffHours = iff((DayOfWeek == 0d or DayOfWeek == 6d) or (Hour < 6 or Hour >= 22), true, false)
    // Filtro condicional de horario
    | where soloFueraHorario == false or IsOffHours == true
    | top limitePorFuente by FechaHoraEvento desc  // *** CAMBIADO: ordena por hora real ***   
    | extend Usuario = coalesce(CurrentUser, "DESCONOCIDO")
    | extend Servidor = coalesce(Server_name, Instance, "DESCONOCIDO")
    | extend DatabaseName = Database
    | extend SQLStatement = Statement
    | extend ActionID = Action
    | extend Succeeded = "true"
    | extend Origen = "Logstash"
    | extend DetallesCompletos = Message
    | extend FechaEvento = FechaHoraEvento  // *** CAMBIADO: usa hora real ***   
    // Extracción de tabla
    | extend TablaDirecta = iff(isnotempty(Table), Table, "")
    | extend TablaExtraida = case(
        SQLStatement matches regex @"\[?([a-zA-Z0-9_]+)\]?\.\[?([a-zA-Z0-9_]+)\]?", 
            extract(@"\[?([a-zA-Z0-9_]+)\]?\.\[?([a-zA-Z0-9_]+)\]?", 0, SQLStatement),
        SQLStatement matches regex @"(?:FROM|INTO|TABLE|ON|UPDATE|DROP TABLE|ALTER TABLE|CREATE TABLE|TRUNCATE TABLE)\s+\[?([a-zA-Z0-9_\.]+)\]?",
            extract(@"(?:FROM|INTO|TABLE|ON|UPDATE|DROP TABLE|ALTER TABLE|CREATE TABLE|TRUNCATE TABLE)\s+\[?([a-zA-Z0-9_\.]+)\]?", 1, SQLStatement),
        SQLStatement has "UPDATE STATISTICS",
            extract(@"UPDATE STATISTICS\s+\[?([a-zA-Z0-9_\.]+)\]?", 1, SQLStatement),
        ""
    )
    | extend ObjetoAfectado = case(
        isnotempty(TablaDirecta), TablaDirecta,
        isnotempty(TablaExtraida), TablaExtraida,
        "N/A"
    )
    | project FechaEvento, Servidor, Usuario, DatabaseName, SQLStatement, ActionID, Succeeded, 
              Origen, DetallesCompletos, Hour, DayOfWeek, ObjetoAfectado, IsOffHours
);
// ============================================
// UNION Y PROCESAMIENTO COMÚN
// ============================================
union isfuzzy=true ArcData, LogstashData
| extend DayName = case(
    DayOfWeek == 0d, "Domingo",
    DayOfWeek == 1d, "Lunes",
    DayOfWeek == 2d, "Martes",
    DayOfWeek == 3d, "Miercoles",
    DayOfWeek == 4d, "Jueves",
    DayOfWeek == 5d, "Viernes",
    DayOfWeek == 6d, "Sabado",
    "Desconocido"
)
| extend TimeSlot = case(
    Hour >= 0 and Hour < 6, strcat("Madrugada (", Hour, ":00)"),
    Hour >= 6 and Hour < 12, strcat("Manana (", Hour, ":00)"),
    Hour >= 12 and Hour < 18, strcat("Tarde (", Hour, ":00)"),
    Hour >= 18 and Hour < 22, strcat("Noche (", Hour, ":00)"),
    strcat("Noche Avanzada (", Hour, ":00)")
)
| extend TipoUsuario = case(
    Usuario contains "NT AUTHORITY" or Usuario contains "NT SERVICE", "CUENTA_SISTEMA",
    Usuario endswith "$", "CUENTA_MAQUINA",
    Usuario =~ "sa", "SA_ADMIN",
    Usuario contains "\\", "CUENTA_DOMINIO",
    "USUARIO_SQL"
)
| extend Accion = case(
    SQLStatement has "xp_cmdshell", "COMANDO_SISTEMA_xp_cmdshell",
    SQLStatement has "sp_configure", "CONFIGURACION_SERVIDOR",
    SQLStatement has "sp_addlinkedserver", "SERVIDOR_VINCULADO",
    SQLStatement has "CREATE LOGIN", "CREAR_LOGIN",
    SQLStatement has "DROP LOGIN", "ELIMINAR_LOGIN",
    SQLStatement has "ALTER LOGIN", "MODIFICAR_LOGIN",
    SQLStatement has "CREATE USER", "CREAR_USUARIO",
    SQLStatement has "DROP USER", "ELIMINAR_USUARIO",
    SQLStatement has "ALTER USER", "MODIFICAR_USUARIO",
    SQLStatement has "ADD MEMBER" or SQLStatement has "sp_addrolemember", "AGREGAR_A_ROL",
    SQLStatement has "DROP MEMBER" or SQLStatement has "sp_droprolemember", "QUITAR_DE_ROL",
    SQLStatement has "GRANT CONTROL", "OTORGAR_CONTROL",
    SQLStatement has "GRANT ALTER", "OTORGAR_ALTER",
    SQLStatement has "GRANT", "OTORGAR_PERMISO",
    SQLStatement has "REVOKE", "REVOCAR_PERMISO",
    SQLStatement has "DENY", "DENEGAR_PERMISO",
    SQLStatement has "CREATE DATABASE", "CREAR_BD",
    SQLStatement has "DROP DATABASE", "ELIMINAR_BD",
    SQLStatement has "ALTER DATABASE", "MODIFICAR_BD",
    SQLStatement has "BACKUP DATABASE", "BACKUP_BD",
    SQLStatement has "RESTORE DATABASE", "RESTORE_BD",
    SQLStatement has "CREATE TABLE", "CREAR_TABLA",
    SQLStatement has "DROP TABLE", "ELIMINAR_TABLA",
    SQLStatement has "ALTER TABLE", "MODIFICAR_TABLA",
    SQLStatement has "TRUNCATE TABLE", "TRUNCAR_TABLA",
    SQLStatement has "CREATE PROCEDURE", "CREAR_PROCEDURE",
    SQLStatement has "DROP PROCEDURE", "ELIMINAR_PROCEDURE",
    SQLStatement has "CREATE VIEW", "CREAR_VIEW",
    SQLStatement has "DROP VIEW", "ELIMINAR_VIEW",
    SQLStatement has "CREATE" or ActionID has "CREATE", "CREAR_OTRO",
    SQLStatement has "DROP" or ActionID has "DROP", "ELIMINAR_OTRO",
    SQLStatement has "ALTER" or ActionID has "ALTER", "MODIFICAR_OTRO",
    SQLStatement has "INSERT", "INSERT_DATOS",
    SQLStatement has "UPDATE" or ActionID has "UPDATE", "UPDATE_DATOS",
    SQLStatement has "DELETE", "DELETE_DATOS",
    SQLStatement has "SELECT", "SELECT_CONSULTA",
    strcat("NO_CLASIFICADO_", ActionID)
)
| extend Severidad = case(
    Accion contains "COMANDO_SISTEMA" or Accion contains "CONFIGURACION_SERVIDOR", "CRITICO",
    (Accion contains "CREAR_LOGIN" or Accion contains "ELIMINAR_LOGIN" or Accion contains "ELIMINAR_BD") and (Hour < 6 or Hour >= 22) and TipoUsuario != "CUENTA_SISTEMA", "CRITICO",
    Accion contains "CREAR_LOGIN" or Accion contains "ELIMINAR_LOGIN" or Accion contains "ELIMINAR_BD", "ALTO",
    Accion contains "AGREGAR_A_ROL" or Accion contains "OTORGAR_CONTROL", "ALTO",
    Accion contains "BACKUP_BD" or Accion contains "RESTORE_BD", "ALTO",
    (Accion contains "CREAR" or Accion contains "MODIFICAR") and TipoUsuario != "CUENTA_SISTEMA", "MEDIO",
    (DayOfWeek == 0d or DayOfWeek == 6d) and TipoUsuario != "CUENTA_SISTEMA", "MEDIO",
    Accion == "SELECT_CONSULTA" and TipoUsuario == "CUENTA_SISTEMA", "INFO",
    TipoUsuario == "CUENTA_SISTEMA" or TipoUsuario == "CUENTA_MAQUINA", "BAJO",
    "MEDIO"
)
| extend BaseDatos = iff(isempty(DatabaseName) or isnull(DatabaseName), "N/A", DatabaseName)
| extend Resumen = strcat(
    Usuario, " (", TipoUsuario, ") ejecuto ",
    Accion,
    iff(Succeeded == "false", " [FALLIDO]", ""),
    iff(BaseDatos != "N/A", strcat(" en BD: ", BaseDatos), ""),
    iff(ObjetoAfectado != "N/A", strcat(" -> Tabla: ", ObjetoAfectado), ""),
    " [", Origen, "]"
)
// PROYECCIÓN FINAL
| project 
    FechaHora = FechaEvento,
    Dia = DayName,
    Horario = TimeSlot,
    FueraHorario = iff(IsOffHours, "SI", "NO"),
    Servidor,
    Usuario,
    TipoUsuario,
    Accion,
    Exito = iff(Succeeded == "true", "SI", "NO"),
    Severidad,
    BaseDatos,
    Tabla = ObjetoAfectado,
    Resumen,
    Statement = SQLStatement,
    OrigenDatos = Origen,
    DetallesCompletos
| order by Severidad desc, FechaHora desc
| take 1000
